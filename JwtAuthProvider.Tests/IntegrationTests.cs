// This document was completely generated by AI
using System.Net.Http;
using System.Net.Http.Json;
using System.Threading.Tasks;
using System.IdentityModel.Tokens.Jwt;
using System.Linq;
using Microsoft.AspNetCore.Mvc.Testing;
using Xunit;
using JwtAuthProvider;
using JwtAuthProvider.Infrastructure.Authentication;
using System.Text.Json;

namespace JwtAuthProvider.Tests
{
    public class TokenIntegrationTests : IClassFixture<WebApplicationFactory<Program>>
    {
        private readonly HttpClient _client;
        private const string ApiKey = "34023b33-ab56-4925-add5-03666cf294a3"; 

        public TokenIntegrationTests(WebApplicationFactory<Program> factory)
        {
            _client = factory.CreateClient();
        }

        private void AddApiKeyHeader()
        {
            if (!_client.DefaultRequestHeaders.Contains("X-API-KEY"))
                _client.DefaultRequestHeaders.Add("X-API-KEY", ApiKey);
        }

        [Fact]
        public async Task TokenEndpoint_Returns_Valid_Jwt_For_User()
        {
            AddApiKeyHeader();
            var request = new TokenRequest { UserId = "user123", IsAdmin = false };
            var response = await _client.PostAsJsonAsync("/api/token", request);

            response.EnsureSuccessStatusCode();
            var json = await response.Content.ReadAsStringAsync();
            var token = JsonDocument.Parse(json).RootElement.GetProperty("token").GetString();

            var handler = new JwtSecurityTokenHandler();
            var jwt = handler.ReadJwtToken(token);

            Assert.Equal("MicroservicesApiGateway", jwt.Issuer);
            Assert.Contains("AuthorizedClients", jwt.Audiences);
            Assert.Equal("user123", jwt.Claims.First(c => c.Type == JwtRegisteredClaimNames.Sub).Value);
            Assert.Equal("User", jwt.Claims.First(c => c.Type == System.Security.Claims.ClaimTypes.Role).Value);
        }

        [Fact]
        public async Task TokenEndpoint_Returns_Admin_Role_For_AdminUser()
        {
            AddApiKeyHeader();
            var request = new TokenRequest { UserId = "admin123", IsAdmin = true };
            var response = await _client.PostAsJsonAsync("/api/token", request);

            response.EnsureSuccessStatusCode();
            var json = await response.Content.ReadAsStringAsync();
            var token = JsonDocument.Parse(json).RootElement.GetProperty("token").GetString();

            var handler = new JwtSecurityTokenHandler();
            var jwt = handler.ReadJwtToken(token);

            Assert.Equal("Admin", jwt.Claims.First(c => c.Type == System.Security.Claims.ClaimTypes.Role).Value);
        }

        [Fact]
        public async Task TokenEndpoint_Returns_BadRequest_For_MissingUserId()
        {
            AddApiKeyHeader();
            var request = new TokenRequest { UserId = null!, IsAdmin = false };
            var response = await _client.PostAsJsonAsync("/api/token", request);

            Assert.False(response.IsSuccessStatusCode);
            Assert.Equal(System.Net.HttpStatusCode.BadRequest, response.StatusCode);
        }
    }
}