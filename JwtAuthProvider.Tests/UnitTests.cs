// This document was completely generated by AI
using Microsoft.Extensions.Configuration;
using JwtAuthProvider.Infrastructure.Authentication;
using Moq;
using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens.Jwt;
using System.Linq;
using System.Security.Claims;
using Xunit;

namespace JwtAuthProvider.Tests
{
    public class JwtTokenServiceTests
    {
        private readonly Mock<IConfiguration> _mockConfiguration;
        private readonly Mock<IConfigurationSection> _jwtSection;

        public JwtTokenServiceTests()
        {
            // Setup mock configuration
            _mockConfiguration = new Mock<IConfiguration>();
            _jwtSection = new Mock<IConfigurationSection>();

            // Setup JWT configuration sections
            _mockConfiguration.Setup(x => x["JWT:Secret"]).Returns("8fLxpECXIvZ3s7bT4JlKqGnM0wRuYdAe6F9P2OcQhDiU5WaNjVzByH1o");
            _mockConfiguration.Setup(x => x["JWT:Issuer"]).Returns("MicroservicesApiGateway");
            _mockConfiguration.Setup(x => x["JWT:Audience"]).Returns("AuthorizedClients");
            _mockConfiguration.Setup(x => x["JWT:ExpireMinutes"]).Returns("60");
        }

        [Fact]
        public void GenerateToken_ValidInputs_ReturnsValidToken()
        {
            // Arrange
            var service = new JwtTokenService(_mockConfiguration.Object);
            var userId = "user123";
            var isAdmin = false;

            // Act
            var token = service.GenerateToken(userId, isAdmin);

            // Assert
            Assert.NotNull(token);
            Assert.NotEmpty(token);

            // Decode the token and verify the claims
            var handler = new JwtSecurityTokenHandler();
            var jsonToken = handler.ReadToken(token) as JwtSecurityToken;

            Assert.NotNull(jsonToken);
            Assert.Equal("MicroservicesApiGateway", jsonToken.Issuer);
            Assert.Contains("AuthorizedClients", jsonToken.Audiences);
            Assert.Equal(userId, jsonToken.Claims.First(c => c.Type == JwtRegisteredClaimNames.Sub).Value);
            Assert.Equal("User", jsonToken.Claims.First(c => c.Type == ClaimTypes.Role).Value);

            // Verify token expiry
            var expiry = jsonToken.ValidTo;
            // Token should expire in about 60 minutes (allow for 1 minute test execution time)
            Assert.True(expiry > DateTime.UtcNow.AddMinutes(58) && expiry <= DateTime.UtcNow.AddMinutes(60));
        }

        [Fact]
        public void GenerateToken_AdminUser_ContainsAdminRole()
        {
            // Arrange
            var service = new JwtTokenService(_mockConfiguration.Object);
            var userId = "admin123";
            var isAdmin = true;

            // Act
            var token = service.GenerateToken(userId, isAdmin);

            // Assert
            var handler = new JwtSecurityTokenHandler();
            var jsonToken = handler.ReadToken(token) as JwtSecurityToken;

            Assert.NotNull(jsonToken);
            Assert.Equal("Admin", jsonToken.Claims.First(c => c.Type == ClaimTypes.Role).Value);
        }

        [Fact]
        public void GenerateToken_MissingSecret_ThrowsInvalidOperationException()
        {
            // Arrange
            _mockConfiguration.Setup(x => x["JWT:Secret"]).Returns((string)null!);
            var service = new JwtTokenService(_mockConfiguration.Object);

            // Act & Assert
            var exception = Assert.Throws<InvalidOperationException>(() => service.GenerateToken("user123", false));
            Assert.Equal("JWT key is not configured", exception.Message);
        }

        [Fact]
        public void GenerateToken_MissingIssuer_ThrowsInvalidOperationException()
        {
            // Arrange
            _mockConfiguration.Setup(x => x["JWT:Issuer"]).Returns((string)null!);
            var service = new JwtTokenService(_mockConfiguration.Object);

            // Act & Assert
            var exception = Assert.Throws<InvalidOperationException>(() => service.GenerateToken("user123", false));
            Assert.Equal("JWT issuer is not configured", exception.Message);
        }

        [Fact]
        public void GenerateToken_MissingAudience_ThrowsInvalidOperationException()
        {
            // Arrange
            _mockConfiguration.Setup(x => x["JWT:Audience"]).Returns((string)null!);
            var service = new JwtTokenService(_mockConfiguration.Object);

            // Act & Assert
            var exception = Assert.Throws<InvalidOperationException>(() => service.GenerateToken("user123", false));
            Assert.Equal("JWT audience is not configured", exception.Message);
        }

        [Fact]
        public void GenerateToken_InvalidExpireMinutes_UsesDefaultValue()
        {
            // Arrange
            _mockConfiguration.Setup(x => x["JWT:ExpireMinutes"]).Returns("invalid");
            var service = new JwtTokenService(_mockConfiguration.Object);

            // Act
            var token = service.GenerateToken("user123", false);

            // Assert
            var handler = new JwtSecurityTokenHandler();
            var jsonToken = handler.ReadToken(token) as JwtSecurityToken;

            Assert.NotNull(jsonToken);
            // Default value is 15 minutes when invalid
            var expiry = jsonToken.ValidTo;
            // Token should expire in about 15 minutes (allow for 1 minute test execution time)
            Assert.True(expiry > DateTime.UtcNow.AddMinutes(13) && expiry <= DateTime.UtcNow.AddMinutes(15));
        }
    }
}
